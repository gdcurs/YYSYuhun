<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                                xmlns:mapapps="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"

                    xmlns:local="clr-namespace:YuHunYYS">


    <SolidColorBrush x:Key="AppColor1" Color="#FF37A9AF"/>
    <SolidColorBrush x:Key="AppColor" Color="#FF82C6CA"/>

    <SolidColorBrush x:Key="AppColorLight" Color="#FFA7D4D7"/>
    <SolidColorBrush x:Key="AppColorDeep" Color="#FF37A9AF"/>

    <SolidColorBrush x:Key="MouseOverColorLight" Color="#FFE5E5E5"/>
    <SolidColorBrush x:Key="MouseOverColor" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="PressColor" Color="#FFC2C2C2"/>
    <SolidColorBrush x:Key="DisabledColor" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="DeleteColor" Color="#FFEC6B76"/>
    <SolidColorBrush x:Key="DeleteColorLight" Color="#FFED979F"/>
    <SolidColorBrush x:Key="BorderColor" Color="Silver"/>
    <SolidColorBrush x:Key="textForeColor" Color="#FF616161"/>
    <SolidColorBrush x:Key="GrayBackColor" Color="#FFF2F2F2"/>


    <SolidColorBrush x:Key="PurpleColor" Color="#FF5459A7"/>
    <SolidColorBrush x:Key="BlueColor" Color="#FF4295D1"/>
    <SolidColorBrush x:Key="FavoriteColorBrush" Color="Gold"/>
    <SolidColorBrush x:Key="FavoriteColorBrushLight" Color="#FFFAE261"/>



    <Style TargetType="ScrollViewer">
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
    </Style>

    <Style TargetType="TextBlock" x:Key="iconText">
        <Setter Property="FontFamily" Value="Segoe MDL2 Assets"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
    </Style>


    <Style TargetType="Button" x:Key="IconButton"
           BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>


    <Style TargetType="mapapps:ToggleSwitch" BasedOn="{StaticResource MahApps.Metro.Styles.ToggleSwitch.Win10}">
        <Setter Property="Content" Value=""/>
    </Style>




    <ControlTemplate x:Key="AppButton" TargetType="{x:Type Button}">

        <Border BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                OpacityMask="{TemplateBinding OpacityMask}"
                x:Name="Border">
            <ContentPresenter HorizontalAlignment="Stretch"
                              VerticalAlignment="Center"
                              TextBlock.TextAlignment="Center">
            </ContentPresenter>
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource DisabledColor}"/>
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border" 
                        Value="{Binding ElementName=Border,Path=OpacityMask}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{Binding ElementName=Border,Path=BorderBrush}"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style TargetType="Button">
        <Setter Property="Template" Value="{StaticResource AppButton}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black"/>

        <Setter Property="BorderBrush" Value="{DynamicResource PressColor}" />
        <Setter Property="OpacityMask" Value="{DynamicResource MouseOverColor}"/>

    </Style>
    
    <Style TargetType="Button" x:Key="DeleteButtonStyle" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{DynamicResource DeleteColor}" />
        <Setter Property="OpacityMask" Value="{DynamicResource DeleteColorLight}"/>
    </Style>

    <Style TargetType="Button" x:Key="AppThemeButtonStyle" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="BorderBrush" Value="{DynamicResource AppColor}" />
        <Setter Property="OpacityMask" Value="{DynamicResource AppColorLight}"/>
    </Style>



    <Style TargetType="Button" x:Key="TextButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="grid" Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center"
                                          VerticalAlignment="Center"
                                          x:Name="button_content" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource AppColorDeep}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="Black"/>
    </Style>



    <ControlTemplate x:Key="DarkBackButtonControlTemplate" TargetType="{x:Type Button}">
        <Border x:Name="Border"
                BorderThickness="{TemplateBinding BorderThickness}"
                BorderBrush="{TemplateBinding BorderBrush}"
                Background="{TemplateBinding Background}">
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="DarkBackButtonStyle" TargetType="Button">
        <Setter Property="Template" Value="{StaticResource DarkBackButtonControlTemplate}" />
        <Setter Property="Background"  Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Height" Value="auto"/>
        <Setter Property="Foreground" Value="White"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#4CFFFFFF"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#26FFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <ControlTemplate x:Key="ToggleButtonControlTemplate"
                     TargetType="{x:Type ToggleButton}">
        <Border BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                OpacityMask="{TemplateBinding OpacityMask}"
                x:Name="Border">
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                              VerticalAlignment="{TemplateBinding VerticalAlignment}" />
        </Border>

        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource DisabledColor}"/>
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border" 
                        Value="{Binding ElementName=Border,Path=OpacityMask}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{Binding ElementName=Border,Path=BorderBrush}"/>
            </Trigger>

            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground"
                        Value="{DynamicResource AppColorDeep}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="true"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="Border"
                        Value="{Binding ElementName=Border,Path=OpacityMask}"/>
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsChecked" Value="true"/>
                    <Condition Property="IsPressed" Value="true"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" TargetName="Border"
                        Value="{Binding ElementName=Border,Path=BorderBrush}"/>
            </MultiTrigger>


        </ControlTemplate.Triggers>
    </ControlTemplate>


    <Style TargetType="ToggleButton">
        <Setter Property="Template" Value="{StaticResource ToggleButtonControlTemplate}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black"/>

        <Setter Property="BorderBrush" Value="{DynamicResource PressColor}" />
        <Setter Property="OpacityMask" Value="{DynamicResource MouseOverColorLight}"/>

    </Style>

    <Style TargetType="ToggleButton" x:Key="FavoriteToggleButtonStyle" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="BorderBrush" Value="{DynamicResource FavoriteColorBrush}" />
        <Setter Property="OpacityMask" Value="{DynamicResource FavoriteColorBrushLight}"/>
    </Style>

    <Style TargetType="ToggleButton" x:Key="AppThemeToggleButtonStyle" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="BorderBrush" Value="{DynamicResource AppColor}" />
        <Setter Property="OpacityMask" Value="{DynamicResource AppColorLight}"/>
    </Style>

    <Style TargetType="ToggleButton" x:Key="SwitchToggleButtonStyle" BasedOn="{StaticResource {x:Type ToggleButton}}">

    </Style>


    <Style TargetType="ToggleButton" x:Key="CheckBoxButton">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="buttonBorder" BorderThickness="1"
                            VerticalAlignment="Center"
                            BorderBrush="{DynamicResource AppColorDeep}"
                            HorizontalAlignment="Center"
                            Width="auto"
                            Height="auto"
                            Background="Transparent">
                        <Grid>
                            <TextBlock FontFamily="Segoe MDL2 Assets"
                                       FontSize="{TemplateBinding FontSize}"
                                       x:Name="contentGrid"
                                       Foreground="Transparent"
                                       Text="&#xE005;" HorizontalAlignment="Center" VerticalAlignment="Center"/>

                        </Grid>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground"
                                    TargetName="contentGrid"
                                    Value="{DynamicResource AppColorDeep}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="buttonBorder"
                                    Value="#FF329B9F"/>
                        </Trigger>

                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>

    <Style TargetType="ToggleButton" x:Key="DarkBackToggleButton">
        <Setter Property="Foreground" Value="White"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="buttonBorder"
                            BorderThickness="0"
                            Background="Transparent">
                        <ContentPresenter x:Name="button_content" 
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalAlignment="Center" />


                    </Border>
                    <ControlTemplate.Triggers>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="buttonBorder" Value="#4CFFFFFF"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="buttonBorder" Value="#26FFFFFF"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" TargetName="buttonBorder"
                                    Value="#19000000"/>
                        </Trigger>


                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>


        <Style TargetType="{x:Type MenuItem}">
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#FFF2F2F2"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="MinHeight" Value="35"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <!--Item-->
                    <Border  x:Name="border"
                             Background="Transparent"
                             Height="{TemplateBinding Height}">
                        <Grid  VerticalAlignment="Center" Margin="{TemplateBinding Margin}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="icon_col" MaxWidth="35" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition Width="20" x:Name="arrow_col" SharedSizeGroup="MenumItemArrow"/>
                            </Grid.ColumnDefinitions>
                            <!--icon-->
                            <TextBlock x:Name="PART_Icon" Text="{TemplateBinding Icon}"
                                       Foreground="{TemplateBinding Foreground}"
                                       Margin="5,1,1,1"
                                       FontSize="12" />
                            <!--Header-->
                            <ContentPresenter Grid.Column="1" x:Name="txtHeader"
                                              Margin="3,1,5,1" MinWidth="90"
                                              RecognizesAccessKey="True" VerticalAlignment="Center" ContentSource="Header"/>
                            <!--快捷键 InputGestureText 暂不支持你了 -->
                            <TextBlock Grid.Column="2" Margin="3,1,3,1" x:Name="IGTHost" Text="{TemplateBinding InputGestureText}" 
                                       FontSize="{TemplateBinding FontSize}"
                                       VerticalAlignment="Center" Visibility="Visible" Foreground="{TemplateBinding Foreground}" />
                            <!--右指针-->
                            <TextBlock x:Name="PART_Arrow" 
                                       Style="{StaticResource iconText}"
                                       Grid.Column="3"
                                       Text="&#xE013;"
                                       Foreground="Black" 
                                       FontSize="14"/>
                            <!--淡出子集菜单容器-->
                            <Popup x:Name="SubMenuPopup"
                                   AllowsTransparency="true"
                                   IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" 
                                   Placement="Bottom"
                                   Focusable="false"
                                   PopupAnimation="Slide">
                                <Border Background="{TemplateBinding Background}"
                                        CornerRadius="0"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid  Margin="0,7" x:Name="SubMenu" Grid.IsSharedSizeScope="True">
                                        <StackPanel Margin="0" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </Grid>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <!--触发器-->
                    <ControlTemplate.Triggers>
                        <!--TopLevelHeader:第一级菜单（有子菜单）-->
                        <Trigger Property="Role" Value="TopLevelHeader">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                            <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                            <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                            <Setter Property="Width" Value="0" TargetName="arrow_col"/>
                        </Trigger>
                        <!--TopLevelItem 第一级菜单（无子级）-->
                        <Trigger Property="Role" Value="TopLevelItem">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                            <Setter Property="Margin" Value="5,1,1,1" TargetName="PART_Icon"/>
                            <Setter Property="Margin" Value="1,1,6,1" TargetName="txtHeader"/>
                            <Setter Property="MinWidth" Value="10" TargetName="txtHeader"/>
                            <Setter Property="Width" Value="0" TargetName="arrow_col"/>
                        </Trigger>
                        <!--SubmenuHeader:子菜单，有子菜单-->
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_Arrow"/>
                            <Setter Property="Placement" Value="Right" TargetName="SubMenuPopup"/>
                        </Trigger>
                        <!--SubMenuItem:子菜单，无子级-->
                        <Trigger Property="Role" Value="SubMenuItem">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Arrow"/>
                        </Trigger>
                        <!--选中状态，优先级将高于Icon-->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PART_Icon" Value="&#xe62a;" Property="Text"></Setter>
                            <Setter TargetName="PART_Icon" Value="18" Property="FontSize"></Setter>
                            <Setter TargetName="PART_Icon" Value="red" Property="Foreground"></Setter>
                        </Trigger>

                        <!--高亮状态-->
                        <Trigger Property="IsHighlighted" Value="true">
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#FFDADADA"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="#FFC2C2C2"/>
                        </Trigger>

                        <!--子菜单打开状态-->
                        <Trigger Property="IsSubmenuOpen" Value="true" >
                            
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type ContextMenu}">
        <Setter Property="BorderBrush" Value="#FFCCCCCC"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="#FFF2F2F2"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}">
                        <ItemsPresenter Margin="0,7" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="ListBoxItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ListBoxItem">
                    <Border x:Name="border"
                            MinHeight="35"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Stretch"
                                          VerticalAlignment="Center"
                                          Margin="10,0"
                                          TextBlock.TextAlignment="{TemplateBinding HorizontalAlignment}"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{DynamicResource AppColorLight}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MouseOverColor}"/>
                        </Trigger>


                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource AppColor}"/>
                        </MultiTrigger>
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>

    </Style>


    <ControlTemplate x:Key="ComboBoxToggleButtonTemplate" TargetType="{x:Type ToggleButton}">
        <Border x:Name="Border"
                BorderThickness="{TemplateBinding BorderThickness}"
                Background="{TemplateBinding Background}"
                OpacityMask="{TemplateBinding OpacityMask}"
                BorderBrush="{TemplateBinding BorderBrush}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="35" />
                </Grid.ColumnDefinitions>
                <TextBlock Style="{StaticResource iconText}"
                           Grid.Column="2"
                           Text="&#xE011;"/>
                <Grid Background="Transparent"></Grid>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>

            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="Border"
                        Value="{DynamicResource DisabledColor}"/>
                <Setter Property="Foreground" Value="Gray"/>
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="Border" 
                        Value="{Binding ElementName=Border,Path=OpacityMask}"/>
            </Trigger>

            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{Binding ElementName=Border,Path=BorderBrush}"/>
            </Trigger>
            
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" TargetName="Border"
                        Value="{Binding ElementName=Border,Path=BorderBrush}"/>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <Style x:Key="ComboBoxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template" Value="{StaticResource ComboBoxToggleButtonTemplate}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="Black"/>

        <Setter Property="BorderBrush" Value="{DynamicResource PressColor}" />
        <Setter Property="OpacityMask" Value="{DynamicResource MouseOverColor}"/>

    </Style>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="SelectedIndex" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid x:Name="MainGrid">
                        <ToggleButton
                                      Style="{StaticResource ComboBoxToggleButtonStyle}"
                                      BorderThickness="{TemplateBinding BorderThickness}"
                                      IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}">
                        </ToggleButton>

                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" 
                                              Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              VerticalAlignment="Center"
                                              TextBlock.TextAlignment="Left"
                                              Margin="10,0"
                                              HorizontalAlignment="Stretch" />


                        <Popup Name="Popup" Placement="Bottom"
                               Width="{Binding ElementName=MainGrid,Path=ActualWidth}"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Border BorderBrush="#FFCCCCCC"
                                    BorderThickness="1"
                                    Background="#FFF2F2F2">
                                <ScrollViewer Margin="0,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
        </Style.Triggers>
    </Style>





    <Style x:Key="{x:Type ComboBoxItem}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="border"
                            MinHeight="30"
                            BorderThickness="0,0,0,0"
                            HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                            Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Stretch"
                                          VerticalAlignment="Center"
                                          Margin="10,0"
                                          TextBlock.TextAlignment="{TemplateBinding HorizontalAlignment}"
                                          TextBlock.Foreground="{TemplateBinding Foreground}"/>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter Property="Background" Value="{DynamicResource AppColorLight}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{DynamicResource MouseOverColor}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsMouseOver" Value="true"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource AppColor}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent"/>
    </Style>



    <Style TargetType="Border" x:Key="Line">
        <Setter Property="BorderBrush" Value="{DynamicResource BorderColor}"/>
        <Setter Property="BorderThickness" Value="0,0,0,0.5"/>
    </Style>












    <BooleanToVisibilityConverter x:Key="bool2VisibilityConverter" />


    <Style x:Key="WindowButtonStyle" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Height" Value="30"/>
        <Setter Property="Width" Value="45"/>
    </Style>
    <Style TargetType="Image" x:Key="WindowImageStyle">
        <Setter Property="Width" Value="10"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <Style x:Key="UWPWindowStyle" TargetType="Window">
        <Setter Property="ResizeMode" Value="CanResize" />
        <Setter Property="UseLayoutRounding" Value="True" />
        <Setter Property="TextOptions.TextFormattingMode" Value="Display" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Window">
                    <Border x:Name="WindowBorder"
                            
                            Background="{TemplateBinding Background}"
                            Margin="{Binding Source={x:Static SystemParameters.WindowNonClientFrameThickness}}">
                        <Grid>
                            <Border BorderThickness="1">
                                <AdornerDecorator>
                                    <Grid x:Name="LayoutRoot">
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto" />
                                            <RowDefinition Height="*" />
                                        </Grid.RowDefinitions>
                                        <ContentPresenter Grid.Row="1"/>
                                        <Grid x:Name="TitleGrid" Height="30">
                                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" WindowChrome.IsHitTestVisibleInChrome="True" Grid.Row="0">

                                                <Button Width="90"
                                                        Command="{x:Static local:App.ContactmeCommand}"
                                                        Style="{StaticResource AppThemeButtonStyle}">
                                                    <StackPanel Orientation="Horizontal">
                                                        <TextBlock Margin="10,0,10,0"  Text="联系我" FontSize="13" HorizontalAlignment="Center" VerticalAlignment="Center" FontFamily="Microsoft YaHei UI Light">
                                                        </TextBlock>
                                                        <Image Width="19"
                                                               Opacity="0.5"
                                                               Margin="0,1,5,0"
                                                               Source="/YuHunYYS;component/icon/mail.png" />
                                                        
                                                    </StackPanel>
                                                </Button>
                                                <Border BorderThickness="0.8,0,0,0" BorderBrush="Silver"/>

                                                <Button Style="{StaticResource WindowButtonStyle}"
                                                    x:Name="Min"
                                                    Command="{Binding Source={x:Static SystemCommands.MinimizeWindowCommand}}"
                                                    ToolTip="minimize">
                                                    <Image Source="/icon/min.png"  Style="{StaticResource WindowImageStyle}"/>
                                                </Button>
                                                <Grid Margin="1,0,1,0">
                                                    <Button x:Name="Restore"
                                                        Command="{Binding Source={x:Static SystemCommands.RestoreWindowCommand}}"
                                                        ToolTip="restore"
                                                        Style="{StaticResource WindowButtonStyle}"
                                                        Visibility="Collapsed">
                                                        <Image Source="/icon/restore.png"  Style="{StaticResource WindowImageStyle}"/>
                                                    </Button>
                                                    <Button x:Name="Maximize"
                                                        Style="{StaticResource WindowButtonStyle}"
                                                        Command="{Binding Source={x:Static SystemCommands.MaximizeWindowCommand}}"
                                                        ToolTip="maximize">
                                                        <Image Source="/icon/max.png"  Style="{StaticResource WindowImageStyle}"/>
                                                    </Button>
                                                </Grid>
                                                <Button x:Name="Close" Command="{Binding Source={x:Static SystemCommands.CloseWindowCommand}}"
                                                    Style="{StaticResource WindowButtonStyle}"
                                                    ToolTip="close" >
                                                    <Image Source="/icon/close.png"  Style="{StaticResource WindowImageStyle}"/>
                                                </Button>
                                            </StackPanel>
                                            <StackPanel Orientation="Horizontal">
                                                <Image Margin="5,2,4,1" Width="17" Source="{TemplateBinding Icon}"/>
                                                <TextBlock x:Name="WindowTitleTextBlock"
                                                   Grid.Row="0"
                                                   Text="{TemplateBinding Title}"
                                                   HorizontalAlignment="Left"
                                                   TextTrimming="CharacterEllipsis"
                                                   VerticalAlignment="Center"
                                                   Margin="0 -1 0 0"
                                                   FontSize="13.3"
                                                   Foreground="{TemplateBinding Foreground}"
                                                   FontFamily="Microsoft YaHei UI Light"/>

                                            </StackPanel>

                                        </Grid>
                                    </Grid>
                                </AdornerDecorator>
                            </Border>
                            <Border BorderBrush="{StaticResource AppColorDeep}"
                                    BorderThickness="1"
                                    Visibility="{Binding IsActive, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}, Converter={StaticResource bool2VisibilityConverter}}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="Restore" Property="Visibility" Value="Visible" />
                            <Setter TargetName="LayoutRoot" Property="Margin" Value="5.5" />
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter TargetName="Maximize" Property="Visibility" Value="Visible" />
                            <Setter TargetName="Restore" Property="Visibility" Value="Collapsed" />
                        </Trigger>
  

                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CornerRadius="0" GlassFrameThickness="1" UseAeroCaptionButtons="False" />
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="FontSize" Value="13.3"/>
        <Setter Property="Foreground" Value="#FF4D4D4D"/>
        <Setter Property="Height" Value="35"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>


</ResourceDictionary>


